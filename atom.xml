<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  
  <subtitle>取次花丛懒回顾</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-18T05:20:44.062Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>菜菜小狗</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础</title>
    <link href="http://example.com/2022/02/18/Java%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/02/18/Java%E5%9F%BA%E7%A1%80/</id>
    <published>2022-02-18T05:14:21.000Z</published>
    <updated>2022-02-18T05:20:44.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础复习笔记"><a href="#Java基础复习笔记" class="headerlink" title="Java基础复习笔记"></a>Java基础复习笔记</h1><span id="more"></span><h2 id="一-基础概念"><a href="#一-基础概念" class="headerlink" title="一.基础概念"></a>一.基础概念</h2><h3 id="1-Java面向对象的特点"><a href="#1-Java面向对象的特点" class="headerlink" title="1.Java面向对象的特点"></a>1.Java面向对象的特点</h3><p>面向对象（Object Oriented）是一种软件开发思想。是对现实世界的一种抽象，把相关的数据和方法组织为一个整体来看待。</p><h3 id="2-Java语言跨平台原理"><a href="#2-Java语言跨平台原理" class="headerlink" title="2.Java语言跨平台原理"></a>2.Java语言跨平台原理</h3><p>Java编译器将<strong>Java源程序</strong>编译成与平台无关的字节码文件（<font color="blue">class文件</font>），然后由Java虚拟机（==JVM==）对字节码文件解释执行。故在不同的操作系统下只需要安装不同的Java虚拟机即可实现Java程序的跨平台。</p><p><em>划重点：</em>不同的操作系统用不同的Java虚拟机来对Java源程序进行解释执行</p><h3 id="3-JRE和JDK"><a href="#3-JRE和JDK" class="headerlink" title="3.JRE和JDK"></a>3.JRE和JDK</h3><p>JVM（Java Virtual Machine），Java虚拟机</p><p>JRE（Java Runtime Environment），==Java运行环境==，包含了JVM和Java的核心类库（Java API）</p><p>JDK（Java Development Kit）称为==Java开发工具==，包含了JRE和开发工具</p><h3 id="4-常用DOS命令"><a href="#4-常用DOS命令" class="headerlink" title="4.常用DOS命令"></a>4.常用DOS命令</h3><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符名称:</td><td>盘符切换。E:回车，表示切换到E盘。</td></tr><tr><td>dir</td><td>查看当前路径下的内容。</td></tr><tr><td>cd 目录</td><td>进入单级目录。cd itheima</td></tr><tr><td>cd ..</td><td>回退到上一级目录。</td></tr><tr><td>cd 目录1\目录2...</td><td>进入多级目录。cd itheima\JavaSE</td></tr><tr><td>cd \</td><td>回退到盘符目录。</td></tr><tr><td>cls</td><td>清屏。</td></tr><tr><td>exit</td><td>退出命令提示符窗口。</td></tr></tbody></table><h2 id="二、Java基础语法"><a href="#二、Java基础语法" class="headerlink" title="二、Java基础语法"></a>二、Java基础语法</h2><h3 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h3><p>Java中，数据类型只有“==四类八种==”</p><ul><li><p>整数型：byte、short、int、long<br>byte：1个字节，8 位<br>short：2个字节<br>int：4个字节<br>long：8个字节<br>默认值都为0</p></li><li><p>浮点型：float、double<br>float：单精度浮点型，占4个字节，默认值是0.0f<br>double：双精度浮点型，占8个字节，默认值是0.0d</p></li><li><p>字符型：char<br>占2个字节，16位</p></li><li><p>布尔型：boolean<br>占1个字节，默认值是false</p></li></ul><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>类名：首字母大写<br>包名：尽量保证小写<br>方法名：首字母小写，后面每个单词首字母大写</p><h3 id="2-面向对象"><a href="#2-面向对象" class="headerlink" title="2.面向对象"></a>2.面向对象</h3><h4 id="类也是一种对象"><a href="#类也是一种对象" class="headerlink" title="类也是一种对象"></a>类也是一种对象</h4><p>类相当于是一系列对象的抽象（反过来看，类可以使用new来创建多个对象）</p><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>在Java中，将万物都可以看做是对象，但我们要操作的是一个对象的==引用==（reference）。有一个形象的比喻：将车钥匙和车看作是一组对象的引用和对象的组合。当你想要开车时，你需要拿车钥匙启动车，停车时，你需要拿车钥匙来熄火。车钥匙就相当于引用，车就是对象，由车钥匙来驱动车的使用。而且，就算没有车的存在，车钥匙也是一个独立存在的实体。也就是说，有一个对象引用，但不一定需要一个对象与之关联。即：<br><code>Car carkey;</code><br>这里的创建对象只是==引用==，并非对象，如果要使用这个引用，就需要一个对象来和这个引用相关联，即：<br><code>carkey=new Car();</code><br>通常将创建引用和关联对象同时进行，即：<br><code>Car carkey = new Car();</code><br><strong>理解：</strong> 等号左边为创建一个对象的引用，右边是给出一个新对象，等号将二者进行关联，关联之后就可以使用这个引用。</p><h4 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h4><p>类的一个最基本的要素就是具有属性和方法</p><ul><li>属性可以是任意类型的对象或基本数据类型<br>例如：<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">A</span>()&#123;</span><br><span class="line">    <span class="built_in">int</span> a;</span><br><span class="line">    Apple apple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>方法表示做某些事情的方式，其实就是函数。<br>方法的组成包括方法名称、参数、返回值和方法体<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4>Java中有一种特殊的方法叫做构造方法（构造函数、构造器）。通过提供构造器来确保每个对象都被初始化，也就是说，构造方法专门用于在创建对象时完成类的==初始化==工作。构造方法只能在对象被创建时调用一次，保证对象初始化的进行。注意：构造方法==没有参数类型和返回值==，它的==名称和类名相同==，同一个类中可以有==多个不同的构造方法（参数列表不同）==，没有参数的构造方法被称为默认的构造方法，即：<code>Apple apple = new Apple();</code>。</li></ul><p>如果类中没有手动定义构造方法，JVM会自动生成默认的构造方法。但只要你手动定义了构造方法，JVM就不会生成默认的构造方法，也就是说，此时你想要使用无参构造方法就必须自己手动定义。</p><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><p>方法重载是不类名的不同表现形式。（构造方法也是重载的一种）<br>有两种重载的方式：一种是构造方法的重载，另一种是普通方法的重载。<br><strong>重载的条件</strong>：</p><ul><li>方法名称必须相同</li><li>方法必须不同，即：方法的==参数列表必须不同==（个数不同、类型不同、排列顺序不同等），方法的返回值类型可以相同也可以不同</li><li>重载发生在编译时，编译器根据参数的类型来选择使用哪个方法（所以重载的方法的参数列表必须不同）</li></ul><h4 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h4><p>方法重写发生在子类和父类之间，指的是子类重写父类的方法，而重载指的是同一类中的相同名称的方法。<br><strong>重写的原则</strong>：</p><ul><li>重写的方法必须和父类的方法的返回值类型、方法名、参数列表全部相同。</li><li>重写的方法可以使用@Override注解来标识。</li><li>子类中重写方法的访问权限不能低于父类方法的访问权限。<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4></li></ul><p><strong>类的初始化</strong><br>在使用new来创建一个对象的时候，其实是调用了这个对象的构造方法来进行类的初始化。也就是说，通过构造方法来保证类的初始化。<br><strong>成员初始化</strong><br>Java会保证每个变量在使用前都会获得初始化。成员初始化包括两种：一种是指定值的初始化，另一种是不指定值的初始化，即使用默认值。<br><strong>构造器初始化</strong><br>可以利用构造器来对某些方法或变量进行初始化，确定初始值，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Couter</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Couter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过构造器把i的值初始化为1。</p><h4 id="初始化顺序"><a href="#初始化顺序" class="headerlink" title="初始化顺序"></a>初始化顺序</h4><p>探讨以下内容的初始化顺序</p><ul><li>静态属性：使用static定义的属性</li><li>静态代码块：使用static{}包起来的代码块</li><li>普通属性：非static定义的属性</li><li>普通代码块：{}</li><li>构造方法</li><li>普通方法</li></ul><p><strong>静态属性&gt;静态代码块&gt;普通属性&gt;普通代码块&gt;构造方法</strong></p><h4 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h4><p>数组是相同类型的、用一个标识符名称封装到一起的一个对象序列或基本数据类型的数据的序列，数组通过方括号[]来定义使用：<code>int [] a1;</code>或<code>int a1 [];</code><br><strong>数组赋值：</strong></p><ul><li>直接给每个元素赋值：<code>int array[4] = &#123;1,2,3,4&#125;;</code></li><li>给前面一部分元素赋值，后面元素默认值为0：<code>int array[4] = &#123;2,1&#125;;</code></li><li>初始化时不指定数组长度，由赋值参数的个数来决定数组长度：<code>int array[]=&#123;1,5,2&#125;;</code><br><strong>可变参数列表</strong><br>例：<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> add(<span class="built_in">int</span> ... numbers)&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">sum</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> num : numbers)&#123;</span><br><span class="line">        <span class="keyword">sum</span>+=num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">sum</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>之后就可以使用下面几种方式调用方法：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">add</span>(<span class="number">1</span>);</span><br><span class="line"><span class="attribute">add</span>(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="attribute">add</span>(new Interger[]&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;);</span><br></pre></td></tr></table></figure><h4 id="对象的销毁"><a href="#对象的销毁" class="headerlink" title="对象的销毁"></a>对象的销毁</h4><p>虽然Java语言是基于C+ +的，但是它和C/C+ +一个重要的特征就是不需要手动管理对象的销毁工作。Java中由Java虚拟机进行对象的管理和销毁，虽然我们不需要手动管理对象，但是需要知道==对作用域==的概念。<br><strong>对象作用域：</strong><br>对象作用域决定了对象内部定义的变量名的可见性和生命周期。作用域通常由{}的位置来决定。</p><h4 id="this和super"><a href="#this和super" class="headerlink" title="this和super"></a>this和super</h4><p>this表示当前对象，this可以调用方法、属性和指示对象本身。<br>this用法通常有3种</p><ul><li>this指向当前对象</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Apple</span>&#123;</span><br><span class="line">    <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Apple eatApple()&#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">void</span> <span class="symbol">main</span>(<span class="symbol">String</span> [] <span class="symbol">args</span>)&#123;</span><br><span class="line">        Apple apple = new Apple();</span><br><span class="line">        apple.eatApple().eatApple();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>this修饰属性，最常见的就是在构造方法中使用this调用本类中的属性</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Apple</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num=num;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line">        Apple apple = <span class="keyword">new</span> <span class="built_in">Apple</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过this传递了一个值为10的int类型参数，并把这个值赋给了全局变量num，所以现在num的值就是10。</p><ul><li>this和构造函数一起使用，充当全局关键字</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class Apple&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> <span class="built_in">color</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Apple(<span class="built_in">int</span> num)&#123;</span><br><span class="line">        <span class="keyword">this</span>(num,<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Apple(<span class="keyword">String</span> <span class="built_in">color</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>,<span class="built_in">color</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    pblic Apple(<span class="built_in">int</span> num,<span class="keyword">String</span> <span class="built_in">color</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.num=num;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">color</span>=<span class="built_in">color</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上诉代码中使用<code>this(参数)</code>。相当于调用了其他构造方法，但注意this(参数)必须放在构造方法中的第一行，否则编译不通过。</p><p>如果我们把this理解为指向自身的一个引用，那么super就是指向父类的一个引用。可以使用super.属性(或方法)和super(参数)来调用父类的构造函数。</p><p><strong>注意：</strong></p><table><thead><tr><th>关键字</th><th>this</th><th>super</th></tr></thead><tbody><tr><td>调用方式</td><td>调用本类中的属性、构造函数、方法</td><td>调用父类中的属性、构造函数、方法</td></tr><tr><td>调用位置</td><td>在一个构造函数中调用另一个构造方法时，放在构造函数中第一行</td><td>在一个构造函数中调用另一个构造方法时，放在构造函数中第一行</td></tr><tr><td>调用次数</td><td>一个构造函数只能调用一次</td><td>一个构造函数只能调用一次</td></tr></tbody></table><h3 id="访问控制权限"><a href="#访问控制权限" class="headerlink" title="访问控制权限"></a>访问控制权限</h3><p>访问控制权限又称为封装，是面向对象三大特性的一种。<br>其最核心的一点是：<strong>只对需要的类可见。</strong><br> Java中成员的访问权限有四种：public、protected、default、private</p><table><thead><tr><th></th><th>private</th><th>default</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>同一类</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>同一包中的类</td><td></td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>子类</td><td></td><td></td><td>Y</td><td>Y</td></tr><tr><td>其他包中的类</td><td></td><td></td><td></td><td>Y</td></tr></tbody></table><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>当我们创建一个类时，就默认其继承Object父类，如果你使用extends指定一个类继承了一个父类，那么这个类就是该父类的子类。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>多态是指同一个行为具有多个不同的表现形式。是指一个类的实例的相同方法在不同情形下具有不同的表现形式。封装和继承是多态的基础。<br><strong>多态的实现需要三种充要条件：</strong></p><ul><li>继承</li><li>重写父类方法</li><li>父类引用指向子类<br>例如：</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    int num;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat Fruit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="function"><span class="title">eat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>.num=<span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat&quot;</span>+num+<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="function"><span class="title">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)</span>&#123;</span><br><span class="line">        Fruit fruit = <span class="keyword">new</span> Apple();   <span class="comment">//父类引用指向子类的对象</span></span><br><span class="line">        fruit.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><p>组合即在一个类中创建其它类的对象引用，从而调用其它类的属性和方法。如果想让类具有更多的扩展功能，需要记住：==多组合，少继承==。</p><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>static用来修饰成员变量和方法，被static修饰的变量和方法可以在没有创建对象的情况下通过<code>类名.变量/方法</code>被调用,在静态方法中不能调用非静态的变量和方法。<br><strong>静态代码块</strong>可用于类的初始化操作。静态代码块随着类的加载而执行，因此，通常将只需要进行一次的初始化操作放在静态代码块中。</p><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>final可以修饰类、属性和方法。</p><ul><li>final修饰类时，表示这个类不能被继承。final类中的成员方法会默认指定为final方法。</li><li>final修饰方法时，表示这个方法不能被任何子类重写。</li><li>final修饰变量时分为两种情况，一种是修饰基本数据类型，表示变量值不能被修改；另一种是修饰引用类型的变量，表示对其初始化之后就不能再让其指向另一个对象。</li></ul><h3 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h3><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><ul><li>接口是一个完全抽象的类，只提供方法的定义，不会提供任何方法的实现。</li><li>接口中只能使用两种访问修饰符：public、default。</li><li>接口可以被其它类使用implements关键字实现，实现接口的类需要提供方法的实现，一个接口可以被多个类实现。</li><li>接口不能被实例化，所以接口中不能有构造方法。</li><li>实现接口的类必须实现接口中所有的方法，否则必须定义为抽象类。</li></ul><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>抽象类是一种抽象能力弱于接口的类，使用abstract关键字来表示。<br>在面向对象的概念中，所有的对象都是通过类来描绘的。但是反过来，并不是所有的类都是用来描绘对象的，如果一个类没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。<br>抽象类除了<strong>不能实例化对象</strong>外，类的其他功能依然存在。成员变量，成员方法和构造方法的访问方式和普通类一样。由于抽象类不能实例化对象，所以抽象类必须被继承才能被使用，也是因为这个原因。通常在设计阶段决定要不要设计抽象类。<br>抽象类的特征：</p><ul><li>如果一个类中有抽象方法，那么这个类一定是抽象类。</li><li>抽象类中不一定只有抽象方法，可以在抽象类中定义：构造方法、抽象方法、普通方法、静态方法、普通属性、静态属性</li><li>抽象类和接口一样不能被实例化，只有具体类可以被实例化</li></ul><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>异常是程序中出现的一些错误，但并不是所有错误都是异常。</p><p>Exception位于java.lang包下，它是一种顶级接口，继承于Throwable类，是程序出现的合理情况。</p><p>Throwable类是Java中所有错误（error）和异常（exceptions）的父类。只有继承了Throwable类或者其子类（或者带有@Throw注解的类）才能被抛出。</p><p>Error是程序无法处理的错误，表示运行应用程序中较严重问题，程序一般不会从错误中恢复。大多数错误与代码编写者执行的操作无关，而表示代码运行时JVM出现的问题。例如，JVM内存溢出。Java程序通常不捕获错误，这些错误都是不可检查的，因为它们在应用程序的控制和处理能力之外。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">stateDiagram-v2</span><br><span class="line">    T<span class="function"><span class="title">hrowable</span> --&gt;</span> Exception</span><br><span class="line">    T<span class="function"><span class="title">hrowable</span> --&gt;</span> Error</span><br><span class="line">    E<span class="function"><span class="title">xception</span> --&gt;</span> IOException</span><br><span class="line">    E<span class="function"><span class="title">xception</span> --&gt;</span> RuntimeException</span><br><span class="line">    IOE<span class="function"><span class="title">xception</span> --&gt;</span> FileNotFoundException</span><br><span class="line">    R<span class="function"><span class="title">untimeException</span> --&gt;</span> NullPointException</span><br><span class="line">    E<span class="function"><span class="title">rror</span> --&gt;</span> OutOfMemoryError</span><br><span class="line">    E<span class="function"><span class="title">rror</span> --&gt;</span> IOError</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常见的Exception"><a href="#常见的Exception" class="headerlink" title="常见的Exception"></a>常见的Exception</h4><p>Exception有两种异常，RuntimeException和CheckedException(检查性异常)，这两种异常都应该去捕获。</p><p><strong>常见异常及分类：</strong></p><ul><li>==RuntimeException==：</li></ul><ol><li>ArrayIndexOutOfBoundsException数组越界异常</li><li>NullPointerException空指针异常</li><li>IllegalArgumentException非法参数异常</li><li>ClassCastException类型转换异常</li><li>IllegalStateException非法状态异常</li></ol><ul><li>==CheckedException==：</li></ul><ol><li>NoSuchFieldException</li><li>NoSuchMethodException</li><li>ClassNotFoundException</li><li>IllegalAccessException</li></ol><p><strong>Throwable类的方法</strong></p><ol><li><p>public String getMessage()<br>返回关于发生的异常的详细信息。这个消息在Throwable 类的构造函数中初始化了。</p></li><li><p>public Throwable getCause()<br>返回一个 Throwable 对象代表异常原因。</p></li><li><p>public String toString()<br>返回此 Throwable 的简短描述。</p></li><li><p>public void printStackTrace()<br>将此 Throwable 及其回溯打印到标准错误流。。</p></li><li><p>public StackTraceElement [] getStackTrace()<br>返回一个包含堆栈层次的数组。下标为0的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底。</p></li><li><p>public Throwable fillInStackTrace()<br>用当前的调用栈层次填充Throwable 对象栈层次，添加到栈层次任何先前信息中。</p></li></ol><h4 id="与异常有关的关键字"><a href="#与异常有关的关键字" class="headerlink" title="与异常有关的关键字"></a>与异常有关的关键字</h4><h5 id="throws和throw"><a href="#throws和throw" class="headerlink" title="throws和throw"></a>throws和throw</h5><p>异常也是一个对象，能够被程序员自定义抛出或者应用程序抛出，必须借助throws和throw关键字来定义抛出异常。<br>throws和throw通常成对出现。<br>throw用在方法体内，表示抛出异常实例，由方法体内的语句处理。<br>throws用在方法声明后面，由该方法的调用者来处理。throws主要是声明这个方法会抛出这种类型的异常，使它的调用者知道要捕获这种异常。</p><h4 id="try、finally、catch"><a href="#try、finally、catch" class="headerlink" title="try、finally、catch"></a>try、finally、catch</h4><p>try…catch表示对某一段代码可能抛出的异常进行的捕获。<br>例如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cacheException</span><span class="params">()</span> throws Exception</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;<span class="built_in"><span class="keyword">catch</span></span>(Exception e)&#123;</span><br><span class="line">        e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try…finally表示对一段代码不管执行情况如何，都会执行finally中的代码。<br>try…catch…finally表示对异常捕获后，再执行finally中的代码。</p><h3 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h3><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>泛型其实就是一种参数化的集合，通过设定参数来限制你添加进集合的类型，这样如果你添加进集合的元素类型不符合设定的参数，那么就会报错。多态也可以看作是泛型的机制。一个类继承了父类，那么就能通过它的父类找到对应的子类，但是不能通过其他类来找到这个类。泛型的设计就是希望对象或方法具有广泛的表达能力。</p><h4 id="泛型的使用"><a href="#泛型的使用" class="headerlink" title="泛型的使用"></a>泛型的使用</h4><ul><li>用泛型表示类</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">A</span>&lt;<span class="symbol">T</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line">    <span class="keyword">public</span> T getValue()&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用泛型表示接口<br>泛型接口与泛型类的定义和使用相似。</li><li>用泛型表示方法</li></ul><h4 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h4><p>List是泛型类，为了表示各种泛型List的父类，可以使用类型通配符?表示：List&lt;?&gt;，它的元素类型可以匹配任何类型</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p><strong>Java反射机制是在程序的运行过程中，对于任何一个类，都能够知道它的所有属性和方法；对于任意一个对象，都能够知道调用它的任何属性和方法，这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</strong><br>总结Java==反射==机制主要提供以下几个功能：</p><ul><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个对象所属的类</li><li>在运行时判断任意一个类所有的成员变量和方法</li><li>在运行时调用任意一个对象的方法</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Java基础复习笔记&quot;&gt;&lt;a href=&quot;#Java基础复习笔记&quot; class=&quot;headerlink&quot; title=&quot;Java基础复习笔记&quot;&gt;&lt;/a&gt;Java基础复习笔记&lt;/h1&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>DJ音标</title>
    <link href="http://example.com/2022/01/19/DJ/"/>
    <id>http://example.com/2022/01/19/DJ/</id>
    <published>2022-01-19T08:05:43.000Z</published>
    <updated>2022-01-19T08:36:57.857Z</updated>
    
    <content type="html"><![CDATA[<p align="center">跟着兔老爹学DJ音标~</p><hr><span id="more"></span><p><b>原视频地址：</b><br>【全网最适合中国人的免费音标课(纯干货, 超详细!)-哔哩哔哩】 <a href="https://b23.tv/xKmAzet">https://b23.tv/xKmAzet</a></p><hr><h2 id="元音"><a href="#元音" class="headerlink" title="元音"></a>元音</h2><h3 id="i"><a href="#i" class="headerlink" title="/i:/"></a>/i:/</h3><h4 id="发音技巧"><a href="#发音技巧" class="headerlink" title="发音技巧"></a>发音技巧</h4><p>右边加上两点：，表示长音</p><p>和“一”发育相似，舌位更高（更靠近硬腭），嘴角要向两侧拉开</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><hr><h3 id="ɪ"><a href="#ɪ" class="headerlink" title="/ɪ/"></a>/ɪ/</h3><p>舌位更低，舌尖在下齿后方（短促一些）</p><hr><h3 id="e"><a href="#e" class="headerlink" title="/e/"></a>/e/</h3><p>双唇自然张开，口腔放松，舌面平方离硬腭有一定距离，舌尖在下牙齿后方，和短促的“哎”相似</p><hr><h3 id="ae"><a href="#ae" class="headerlink" title="/æ/"></a>/æ/</h3><p>发音时口型一定要张大、饱满，嘴角向两边拉伸，舌端在下牙齿后方，像同时发/ɑː/和/e/这两个音（口型张大类似于/ɑː/，舌位类似于/e/）</p><hr><h3 id="ɜː"><a href="#ɜː" class="headerlink" title="/ɜː/"></a>/ɜː/</h3><p>嘴自然张开，唇和舌都自然放松，与“饿”相似，但发长音、重读</p><hr><h3 id="ə"><a href="#ə" class="headerlink" title="/ə/"></a>/ə/</h3><p>嘴自然张开，唇和舌自然放松，像普通话里的轻声“么”，不要重读，轻轻地让气流冲出声带自然读出，如果加上重读和变长就成了/ɜː/</p><p><strong>这个音在英语中出现频率最高、最特殊、最重要</strong></p><hr><h3 id="ɑː"><a href="#ɑː" class="headerlink" title="/ɑː/"></a>/ɑː/</h3><p>发音时口型要大、饱满（张嘴要够大），发音更靠口腔后部（舌根处），发音时长要足够长</p><hr><h3 id="v"><a href="#v" class="headerlink" title="/ʌ/"></a>/ʌ/</h3><p>舌尖在下牙齿后方，舌头平放，发音靠口腔后方，近似“啊”，但口型没有那么大，发音更短</p><hr><h3 id="ʊ"><a href="#ʊ" class="headerlink" title="/ʊ/"></a>/ʊ/</h3><p>发音时嘴唇放松，时长短，发音靠后</p><hr><h3 id="u"><a href="#u" class="headerlink" title="/u:/"></a>/u:/</h3><p>和“呜”相似，但嘴型更扁，嘴角向两边拉伸，发音部位靠口腔后部</p><hr><h3 id="ɒ"><a href="#ɒ" class="headerlink" title="/ɒ/"></a>/ɒ/</h3><p>和“凹”相似，但并不相同，发音时嘴型更小，时间更短，没有口型变化</p><hr><h3 id="o"><a href="#o" class="headerlink" title="/ɔ:/"></a>/ɔ:/</h3><p>和“哦”相似，嘴唇要撅起来，圆而外凸，嘴唇肌肉较为紧张，口腔后方发音</p><hr><h3 id="eɪ"><a href="#eɪ" class="headerlink" title="/eɪ/"></a>/eɪ/</h3><p>双元音，由两个元音组成，由/e/和/ɪ/一前一后快速紧密发出，发音时口腔是有变化的</p><hr><h3 id="aɪ"><a href="#aɪ" class="headerlink" title="/aɪ/"></a>/aɪ/</h3><p>/a/和/ɪ/一前一后紧密发出，类似“爱“的韵母，但更饱满，发音时确保张嘴和口型足够大</p><hr><h3 id="oɪ"><a href="#oɪ" class="headerlink" title="/ɔɪ/"></a>/ɔɪ/</h3><p>/ɔ:/变短后和/ɪ/一前一后紧密发出，发音时口腔是有变化的</p><hr><h3 id="aʊ"><a href="#aʊ" class="headerlink" title="/aʊ/"></a>/aʊ/</h3><p>类似于“啊”和/ʊ/一前一后紧密发出，类似“嗷”，但是更饱满、更长，尤其起始发音嘴型要足够大、饱满</p><hr><h3 id="əʊ"><a href="#əʊ" class="headerlink" title="/əʊ/"></a>/əʊ/</h3><hr><h3 id="ɪə"><a href="#ɪə" class="headerlink" title="/ɪə/"></a>/ɪə/</h3><hr><h3 id="eə"><a href="#eə" class="headerlink" title="/eə/"></a>/eə/</h3><hr><h3 id="ʊə"><a href="#ʊə" class="headerlink" title="/ʊə/"></a>/ʊə/</h3><hr><p>/b/  /p/</p><hr><p>/t/  /d/</p><hr>]]></content>
    
    
    <summary type="html">&lt;p align=&quot;center&quot;&gt;跟着兔老爹学DJ音标~&lt;/p&gt;

&lt;hr&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>LeetCode刷题-剑指Offer 09.用两个栈实现队列</title>
    <link href="http://example.com/2022/01/15/lc-JjianzhiOffer09/"/>
    <id>http://example.com/2022/01/15/lc-JjianzhiOffer09/</id>
    <published>2022-01-14T18:36:48.000Z</published>
    <updated>2022-01-19T09:01:56.143Z</updated>
    
    <content type="html"><![CDATA[<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a><strong>题目</strong>：</h4><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p><hr><span id="more"></span><p><strong>示例 1：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">&quot;CQueue&quot;</span>,<span class="string">&quot;appendTail&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>]</span><br><span class="line">[[],[<span class="number">3</span>],[],[]]</span><br><span class="line">输出：[null,null,<span class="number">3</span>,<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[<span class="string">&quot;CQueue&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>,<span class="string">&quot;appendTail&quot;</span>,<span class="string">&quot;appendTail&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>,<span class="string">&quot;deleteHead&quot;</span>]</span><br><span class="line">[[],[],[<span class="number">5</span>],[<span class="number">2</span>],[],[]]</span><br><span class="line">输出：[null,<span class="number">-1</span>,null,null,<span class="number">5</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= values &lt;= 10000</code></li><li><code>最多会对 appendTail、deleteHead 进行 10000 次调用</code></li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof">https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof</a></p><hr><h4 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h4><h5 id="分析题目："><a href="#分析题目：" class="headerlink" title="分析题目："></a>分析题目：</h5><p>用两个栈实现一个队列，即我们需要有两个栈stack1和stack2，要用这两个栈（后进先出）来实现一个队列（先进先出），也就是我们需要实现队列的两个函数 appendTail（插入队尾） 和 deleteHead（删除队首）。</p><ul><li>根据栈后进先出的特性，我们用stack1来进行插入操作，每次将数压入stack1，这样stack1的栈底元素即为第一个插入的数即队首，栈顶元素即为最后一个插入的数即队尾。</li><li>当要进行删除队首操作时，由于队首元素在栈底，所以我们需要将stack1中的数全部出栈并依次压入stack2中，试想一下，这样一来stack2就相当于存放着stack1的倒序，stack2的栈底元素就是原来stack1的栈顶元素即队尾，stack2的栈顶元素即队首，要进行删除队首操作时直接将stack2的栈顶元素弹出即可。</li></ul><h5 id="函数设计："><a href="#函数设计：" class="headerlink" title="函数设计："></a>函数设计：</h5><ul><li><p>appendTail( ):向队尾添加数</p><p>需要传入参数int value，返回值为null，将数压入stack1。</p></li><li><p>deleteHead() ：删除队首元素</p><p>不需要参数，返回值为队首元素，当队列为空时，返回值为-1。</p><ul><li>当stack2不为空，直接删除stack2的栈顶元素</li><li>当stack1、stack2都为空，返回-1</li><li>当stack2为空，stack1不为空，将stack1中的元素依次全部放入stack2中，再删除stack2的栈顶元素</li></ul></li></ul><h5 id="代码（Java实现）："><a href="#代码（Java实现）：" class="headerlink" title="代码（Java实现）："></a>代码（Java实现）：</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> CQueue &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; stack1;</span><br><span class="line">LinkedList&lt;Integer&gt; stack2;</span><br><span class="line">    public <span class="constructor">CQueue()</span> &#123;</span><br><span class="line">         stack1=<span class="keyword">new</span> LinkedList&lt;Integer&gt;<span class="literal">()</span>;</span><br><span class="line">stack2=<span class="keyword">new</span> LinkedList&lt;Integer&gt;<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void append<span class="constructor">Tail(<span class="params">int</span> <span class="params">value</span>)</span> &#123;       <span class="comment">//在队列尾部添加，返回值为null</span></span><br><span class="line">stack1.add<span class="constructor">Last(<span class="params">value</span>)</span>;                <span class="comment">//将元素压入stack1，即放到队尾   </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public <span class="built_in">int</span> delete<span class="constructor">Head()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(stack2.is<span class="constructor">Empty()</span>==<span class="literal">false</span>)&#123;     <span class="comment">//stack2不为空时</span></span><br><span class="line">return stack2.remove<span class="constructor">First()</span>; <span class="comment">//将stack2的栈顶元素删除,即删除队首</span></span><br><span class="line">&#125;</span><br><span class="line">                         <span class="comment">//走到这说明stack2为空</span></span><br><span class="line"><span class="keyword">if</span>(stack1.is<span class="constructor">Empty()</span>)&#123;   <span class="comment">//如果stack1也为空，说明队列没有数，deleteHead函数返回-1</span></span><br><span class="line">return -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">                        <span class="comment">//stack2为空，stack1不为空</span></span><br><span class="line"><span class="keyword">while</span>(stack1.is<span class="constructor">Empty()</span>==<span class="literal">false</span>)&#123;   <span class="comment">//将stack1中的元素按逆序压入stack2中</span></span><br><span class="line">stack2.add<span class="constructor">Last(<span class="params">stack1</span>.<span class="params">removeFirst</span>()</span>);</span><br><span class="line">&#125;</span><br><span class="line">return stack2.remove<span class="constructor">First()</span>;     <span class="comment">//删除stack2栈顶元素即队首元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;&lt;strong&gt;题目&lt;/strong&gt;：&lt;/h4&gt;&lt;p&gt;用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="http://example.com/categories/LeetCode/"/>
    
    <category term="剑指Offer" scheme="http://example.com/categories/LeetCode/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="栈" scheme="http://example.com/categories/LeetCode/%E5%89%91%E6%8C%87Offer/%E6%A0%88/"/>
    
    <category term="队列" scheme="http://example.com/categories/LeetCode/%E5%89%91%E6%8C%87Offer/%E6%A0%88/%E9%98%9F%E5%88%97/"/>
    
    <category term="Java" scheme="http://example.com/categories/LeetCode/%E5%89%91%E6%8C%87Offer/%E6%A0%88/%E9%98%9F%E5%88%97/Java/"/>
    
    
    <category term="LeetCode" scheme="http://example.com/tags/LeetCode/"/>
    
    <category term="剑指Offer" scheme="http://example.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
    <category term="栈" scheme="http://example.com/tags/%E6%A0%88/"/>
    
    <category term="队列" scheme="http://example.com/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客并且部署到GitHub</title>
    <link href="http://example.com/2022/01/11/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E4%B8%94%E9%83%A8%E7%BD%B2%E5%88%B0GitHub/"/>
    <id>http://example.com/2022/01/11/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E4%B8%94%E9%83%A8%E7%BD%B2%E5%88%B0GitHub/</id>
    <published>2022-01-11T11:23:19.000Z</published>
    <updated>2022-01-19T13:06:07.910Z</updated>
    
    <content type="html"><![CDATA[  <blockquote><p>在bilibili刷到程序羊的视频就一时兴起想做个自己的博客，期间遇到了数不清的问题，我一次次地查，一遍遍地尝试，差不多花了3天时间才完全搞好。记录一下整个过程的要点，后续应该还会一直更新~ </p></blockquote><hr><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=483937795&auto=1&height=66"></iframe><h4 id="一、安装node-js"><a href="#一、安装node-js" class="headerlink" title="一、安装node.js"></a>一、安装node.js</h4><ul><li>下载地址：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a> 傻瓜式安装</li></ul><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。</p><p>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执</p><p>行Javascript的速度非常快，性能非常好。</p><hr><h4 id="二、注册github账号"><a href="#二、注册github账号" class="headerlink" title="二、注册github账号"></a>二、注册github账号</h4><ul><li>github官网：<a href="https://github.com/">https://github.com/</a></li></ul><hr><h4 id="三、安装Git"><a href="#三、安装Git" class="headerlink" title="三、安装Git"></a>三、安装Git</h4><p>Git是版本控制工具，用来将本地博客部署到github。Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><h4 id="四、Git的一些重要配置"><a href="#四、Git的一些重要配置" class="headerlink" title="四、Git的一些重要配置"></a>四、Git的一些重要配置</h4><p>1.用户名和邮箱</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> user.name <span class="string">&quot;xxxxxxx&quot;</span>    <span class="meta">#github用户名</span></span><br><span class="line">git config --<span class="keyword">global</span> user.email <span class="string">&quot;xxxxx@xxxx&quot;</span>   <span class="meta">#注册githug的邮箱</span></span><br></pre></td></tr></table></figure><p>2.在github新建一个SSH公钥</p><p>3.生成SSH公钥并添加到你上一步新建的SSH公钥，实现免密码登录</p><ul><li>执行命令：<code>ssh-keygen -t rsa    #生成公钥</code></li><li>然后进入C:\Users\主机名\ .ssh目录，将文件id_rsa.pub里面的内容复制到你上一步新建的SSH公钥中</li></ul><hr><h4 id="五、安装Hexo"><a href="#五、安装Hexo" class="headerlink" title="五、安装Hexo"></a>五、安装Hexo</h4><p>Hexo官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-<span class="keyword">cli</span>   <span class="meta">#全局安装</span></span><br><span class="line">hexo -v   <span class="meta">#查看Hexo版本</span></span><br></pre></td></tr></table></figure><ul><li>官网页面滑到下方可以看到搭建Hexo博客需要用到的一些指令：<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-cli -g</span><br><span class="line">hexo init <span class="keyword">blog</span></span><br><span class="line"><span class="keyword"></span>cd <span class="keyword">blog</span></span><br><span class="line"><span class="keyword"></span>npm <span class="keyword">install</span></span><br><span class="line"><span class="keyword"></span>hexo server</span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="五、创建本地博客站点"><a href="#五、创建本地博客站点" class="headerlink" title="五、创建本地博客站点"></a>五、创建本地博客站点</h4><p>1.打开Git Bash，执行<code>cd d:</code>打开d盘（或其它盘）</p><p>2.初始化一个项目<br>  <code>hexo init  blog  #blog为文件名即项目名</code></p><p>3.<code>cd blog</code>进入blog项目目录</p><p>4.安装项目的依赖包 <code>npm install</code></p><p>5.执行<code>hexo cl</code>回车<code>hexo g</code>回车<code>hexo s</code>回车，此时访问<a href="http://localhost:4000/">http://localhost:4000/</a> 即可看到你的本地Hexo博客</p><hr><h4 id="六、Hexo项目搭建成功"><a href="#六、Hexo项目搭建成功" class="headerlink" title="六、Hexo项目搭建成功"></a>六、Hexo项目搭建成功</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.deploy       <span class="comment"># 需要部署的文件 </span></span><br><span class="line">node_modules  <span class="comment"># 项目所有的依赖包和插件</span></span><br><span class="line">public        <span class="comment"># 生成的静态网页文件 </span></span><br><span class="line"><span class="keyword">scaffolds </span>    <span class="comment"># 文章模板</span></span><br><span class="line">source        <span class="comment"># 博客正文和其他源文件等都应该放在这里</span></span><br><span class="line">   _drafts   <span class="comment"># 草稿</span></span><br><span class="line">   _posts    <span class="comment"># 文章</span></span><br><span class="line">themes        <span class="comment"># 主题</span></span><br><span class="line">_<span class="built_in">config</span>.yml   <span class="comment"># 全局配置文件</span></span><br><span class="line">package.<span class="keyword">json </span> <span class="comment"># 项目依赖信息</span></span><br></pre></td></tr></table></figure><hr><h4 id="七、将项目部署到github"><a href="#七、将项目部署到github" class="headerlink" title="七、将项目部署到github"></a>七、将项目部署到github</h4><p>1.在github新建一个仓库，仓库名为你的用户名</p><p>2.修改本地项目中的_config.yml文件（可以下载Sublime打开），在文件末尾处修改：<br>  type：git<br>  repo：仓库URL地址（我的是 <a href="mailto:&#x67;&#105;&#116;&#x40;&#103;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;">&#x67;&#105;&#116;&#x40;&#103;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#99;&#111;&#x6d;</a>:cstianai/cstianai.github.io.git ）<br>  branch：master<br>  <img src="/2022/01/11/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B6%E4%B8%94%E9%83%A8%E7%BD%B2%E5%88%B0GitHub/1.png" alt="avatar"></p><p>3.执行</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> cl  <span class="comment">#清除hexo缓存</span></span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d  <span class="comment">#上传到远程仓库</span></span><br></pre></td></tr></table></figure><hr><h4 id="八、修改博客主题"><a href="#八、修改博客主题" class="headerlink" title="八、修改博客主题"></a>八、修改博客主题</h4><p>Hexo官网主题：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>1.下载主题放到项目的theme文件夹下</p><p>2.更改配置文件_config.yml：<br><code>theme：你下载的主题名</code></p><hr><h4 id="九、编辑Hexo博客"><a href="#九、编辑Hexo博客" class="headerlink" title="九、编辑Hexo博客"></a>九、编辑Hexo博客</h4><p>1.创建一个新的博客</p><p><code>hexo new &quot;博客标题&quot;</code></p><p>2.添加图片</p><ul><li><p>方法1：<code> &#123;% asset_img example.jpg This is an example image %&#125;</code></p></li><li><p>方法2：安装<code>npm install hexo-asset-image --save</code>，然后修改配置文件中的post_asset_folder为true，然后打开<code>/node_modules/hexo-asset-image/index.js</code>，将文件内容替换为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​</p></li><li><p>然后就可以用<code>! []()</code>来添加图片了</p></li></ul><p>3.Markdown快捷键</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">标题：<span class="variable">Ctrl</span><span class="operator">+</span><span class="number">1</span>、<span class="number">2</span>、<span class="number">3.</span><span class="operator">..</span>对应一、二、三<span class="operator">...</span>级标题（光标定位到需要设置为标题的行，按快捷键）</span><br><span class="line"></span><br><span class="line">加粗：<span class="variable">Ctrl</span><span class="operator">+</span><span class="variable">B</span>（选中要加粗的文本，按快捷键）</span><br><span class="line"></span><br><span class="line">斜体：<span class="variable">Ctrl</span><span class="operator">+</span><span class="built_in">I</span>（选中要设置斜体的文本，按快捷键）</span><br><span class="line"></span><br><span class="line">下划线：<span class="variable">Ctrl</span><span class="operator">+</span><span class="variable">U</span>（选中要加下划线的文本，按快捷键）</span><br><span class="line"></span><br><span class="line">删除线：<span class="variable">Alt</span><span class="operator">+</span><span class="variable">Shift</span><span class="operator">+</span><span class="number">5</span>（选中要加删除线的文本，按快捷键）</span><br><span class="line"></span><br><span class="line">代码片段：<span class="variable">Ctrl</span><span class="operator">+</span><span class="variable">Shift</span><span class="operator">+`</span>（选中要设置为代码片段的文本，按快捷键）</span><br><span class="line"></span><br><span class="line">代码块：<span class="variable">Ctrl</span><span class="operator">+</span><span class="variable">Shift</span><span class="operator">+</span><span class="built_in">K</span>（任意位置按快捷键，选择编程语言然后在代码块中输入代码）</span><br><span class="line"></span><br><span class="line">切换到下一行：<span class="variable">Ctrl</span><span class="operator">+</span><span class="built_in">Enter</span>（任意位置按快捷键，在代码块中可以跳出代码块另起一行）</span><br><span class="line"></span><br><span class="line">链接：<span class="variable">Ctrl</span><span class="operator">+</span><span class="built_in">K</span>（先复制链接，然后选中要加链接的文本，按快捷键。<span class="variable">Ctrl</span><span class="operator">+</span>左键点击文本可跳转到对应链接）</span><br><span class="line"></span><br><span class="line">取消格式：再次按相同的快捷键即可</span><br><span class="line"></span><br><span class="line">无序列表：<span class="operator">-</span></span><br><span class="line"></span><br><span class="line">有序列表：数字<span class="operator">+</span>点<span class="operator">+</span>空格</span><br><span class="line"></span><br><span class="line">任务列表：加号或减号<span class="operator">+</span>空格</span><br><span class="line"></span><br><span class="line">切换到列表下一行：<span class="built_in">Space</span><span class="operator">+</span><span class="built_in">Enter</span></span><br><span class="line"></span><br><span class="line">嵌套列表：按<span class="built_in">Tab</span>键</span><br><span class="line"></span><br><span class="line">退出列表：按 <span class="variable">Shift</span><span class="operator">+</span><span class="built_in">Tab</span></span><br><span class="line"></span><br><span class="line">插入表格：<span class="variable">Ctrl</span><span class="operator">+</span><span class="variable">T</span></span><br><span class="line"></span><br><span class="line">引用：输入<span class="operator">&gt;</span>后面加空格，或者<span class="variable">Ctrl</span><span class="operator">+</span><span class="variable">Shift</span><span class="operator">+</span><span class="variable">Q</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;&lt;p&gt;在bilibili刷到程序羊的视频就一时兴起想做个自己的博客，期间遇到了数不清的问题，我一次次地查，一遍遍地尝试，差不多花了3天时间才完全搞好。记录一下整个过程的要点，后续应该还会一直更新~ &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;</summary>
    
    
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="markdown" scheme="http://example.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>第一篇Hexo博客</title>
    <link href="http://example.com/2022/01/10/title/"/>
    <id>http://example.com/2022/01/10/title/</id>
    <published>2022-01-10T07:23:19.000Z</published>
    <updated>2022-01-11T13:02:30.167Z</updated>
    
    <content type="html"><![CDATA[<p>菜菜小狗要努力！</p><hr><span id="more"></span><p>就由此开始我的第一篇博客啦！</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;菜菜小狗要努力！&lt;/p&gt;
&lt;hr&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/01/10/hello-world/"/>
    <id>http://example.com/2022/01/10/hello-world/</id>
    <published>2022-01-10T04:49:39.770Z</published>
    <updated>2022-01-19T08:11:09.420Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
